/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './app/__root'
import { Route as SettingsRouteImport } from './app/settings/route'
import { Route as PresenterRouteImport } from './app/presenter/route'
import { Route as IndexImport } from './app/index'
import { Route as SettingsIndexImport } from './app/settings/index'
import { Route as PresenterControllerRouteImport } from './app/presenter/controller/route'
import { Route as PresenterControllerIndexImport } from './app/presenter/controller/index'
import { Route as SettingsServerCategoryImport } from './app/settings/server/$category'
import { Route as SettingsClientCategoryImport } from './app/settings/client/$category'
import { Route as SettingsToolsOverlayIndexImport } from './app/settings/tools/overlay/index'
import { Route as SettingsToolsClosedCaptionsIndexImport } from './app/settings/tools/closedCaptions/index'
import { Route as SettingsServerAboutIndexImport } from './app/settings/server/about/index'
import { Route as SettingsClientSourcesIndexImport } from './app/settings/client/sources/index'
import { Route as SettingsClientHotkeysIndexImport } from './app/settings/client/hotkeys/index'
import { Route as PresenterControllerSearchIndexImport } from './app/presenter/controller/search/index'
import { Route as PresenterControllerNavigatorIndexImport } from './app/presenter/controller/navigator/index'
import { Route as PresenterControllerHistoryIndexImport } from './app/presenter/controller/history/index'
import { Route as PresenterControllerBookmarksIndexImport } from './app/presenter/controller/bookmarks/index'

// Create Virtual Routes

const ScreenReaderIndexLazyImport = createFileRoute('/screen-reader/')()
const OverlayIndexLazyImport = createFileRoute('/overlay/')()

// Create/Update Routes

const SettingsRouteRoute = SettingsRouteImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const PresenterRouteRoute = PresenterRouteImport.update({
  path: '/presenter',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./app/presenter/route.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ScreenReaderIndexLazyRoute = ScreenReaderIndexLazyImport.update({
  path: '/screen-reader/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./app/screen-reader/index.lazy').then((d) => d.Route),
)

const OverlayIndexLazyRoute = OverlayIndexLazyImport.update({
  path: '/overlay/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./app/overlay/index.lazy').then((d) => d.Route))

const SettingsIndexRoute = SettingsIndexImport.update({
  path: '/',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const PresenterControllerRouteRoute = PresenterControllerRouteImport.update({
  path: '/controller',
  getParentRoute: () => PresenterRouteRoute,
} as any)

const PresenterControllerIndexRoute = PresenterControllerIndexImport.update({
  path: '/',
  getParentRoute: () => PresenterControllerRouteRoute,
} as any)

const SettingsServerCategoryRoute = SettingsServerCategoryImport.update({
  path: '/server/$category',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const SettingsClientCategoryRoute = SettingsClientCategoryImport.update({
  path: '/client/$category',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const SettingsToolsOverlayIndexRoute = SettingsToolsOverlayIndexImport.update({
  path: '/tools/overlay/',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const SettingsToolsClosedCaptionsIndexRoute =
  SettingsToolsClosedCaptionsIndexImport.update({
    path: '/tools/closedCaptions/',
    getParentRoute: () => SettingsRouteRoute,
  } as any)

const SettingsServerAboutIndexRoute = SettingsServerAboutIndexImport.update({
  path: '/server/about/',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const SettingsClientSourcesIndexRoute = SettingsClientSourcesIndexImport.update(
  {
    path: '/client/sources/',
    getParentRoute: () => SettingsRouteRoute,
  } as any,
)

const SettingsClientHotkeysIndexRoute = SettingsClientHotkeysIndexImport.update(
  {
    path: '/client/hotkeys/',
    getParentRoute: () => SettingsRouteRoute,
  } as any,
)

const PresenterControllerSearchIndexRoute =
  PresenterControllerSearchIndexImport.update({
    path: '/search/',
    getParentRoute: () => PresenterControllerRouteRoute,
  } as any)

const PresenterControllerNavigatorIndexRoute =
  PresenterControllerNavigatorIndexImport.update({
    path: '/navigator/',
    getParentRoute: () => PresenterControllerRouteRoute,
  } as any)

const PresenterControllerHistoryIndexRoute =
  PresenterControllerHistoryIndexImport.update({
    path: '/history/',
    getParentRoute: () => PresenterControllerRouteRoute,
  } as any)

const PresenterControllerBookmarksIndexRoute =
  PresenterControllerBookmarksIndexImport.update({
    path: '/bookmarks/',
    getParentRoute: () => PresenterControllerRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/presenter': {
      id: '/presenter'
      path: '/presenter'
      fullPath: '/presenter'
      preLoaderRoute: typeof PresenterRouteImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRoute
    }
    '/presenter/controller': {
      id: '/presenter/controller'
      path: '/controller'
      fullPath: '/presenter/controller'
      preLoaderRoute: typeof PresenterControllerRouteImport
      parentRoute: typeof PresenterRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof SettingsRouteImport
    }
    '/overlay/': {
      id: '/overlay/'
      path: '/overlay'
      fullPath: '/overlay'
      preLoaderRoute: typeof OverlayIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/screen-reader/': {
      id: '/screen-reader/'
      path: '/screen-reader'
      fullPath: '/screen-reader'
      preLoaderRoute: typeof ScreenReaderIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings/client/$category': {
      id: '/settings/client/$category'
      path: '/client/$category'
      fullPath: '/settings/client/$category'
      preLoaderRoute: typeof SettingsClientCategoryImport
      parentRoute: typeof SettingsRouteImport
    }
    '/settings/server/$category': {
      id: '/settings/server/$category'
      path: '/server/$category'
      fullPath: '/settings/server/$category'
      preLoaderRoute: typeof SettingsServerCategoryImport
      parentRoute: typeof SettingsRouteImport
    }
    '/presenter/controller/': {
      id: '/presenter/controller/'
      path: '/'
      fullPath: '/presenter/controller/'
      preLoaderRoute: typeof PresenterControllerIndexImport
      parentRoute: typeof PresenterControllerRouteImport
    }
    '/presenter/controller/bookmarks/': {
      id: '/presenter/controller/bookmarks/'
      path: '/bookmarks'
      fullPath: '/presenter/controller/bookmarks'
      preLoaderRoute: typeof PresenterControllerBookmarksIndexImport
      parentRoute: typeof PresenterControllerRouteImport
    }
    '/presenter/controller/history/': {
      id: '/presenter/controller/history/'
      path: '/history'
      fullPath: '/presenter/controller/history'
      preLoaderRoute: typeof PresenterControllerHistoryIndexImport
      parentRoute: typeof PresenterControllerRouteImport
    }
    '/presenter/controller/navigator/': {
      id: '/presenter/controller/navigator/'
      path: '/navigator'
      fullPath: '/presenter/controller/navigator'
      preLoaderRoute: typeof PresenterControllerNavigatorIndexImport
      parentRoute: typeof PresenterControllerRouteImport
    }
    '/presenter/controller/search/': {
      id: '/presenter/controller/search/'
      path: '/search'
      fullPath: '/presenter/controller/search'
      preLoaderRoute: typeof PresenterControllerSearchIndexImport
      parentRoute: typeof PresenterControllerRouteImport
    }
    '/settings/client/hotkeys/': {
      id: '/settings/client/hotkeys/'
      path: '/client/hotkeys'
      fullPath: '/settings/client/hotkeys'
      preLoaderRoute: typeof SettingsClientHotkeysIndexImport
      parentRoute: typeof SettingsRouteImport
    }
    '/settings/client/sources/': {
      id: '/settings/client/sources/'
      path: '/client/sources'
      fullPath: '/settings/client/sources'
      preLoaderRoute: typeof SettingsClientSourcesIndexImport
      parentRoute: typeof SettingsRouteImport
    }
    '/settings/server/about/': {
      id: '/settings/server/about/'
      path: '/server/about'
      fullPath: '/settings/server/about'
      preLoaderRoute: typeof SettingsServerAboutIndexImport
      parentRoute: typeof SettingsRouteImport
    }
    '/settings/tools/closedCaptions/': {
      id: '/settings/tools/closedCaptions/'
      path: '/tools/closedCaptions'
      fullPath: '/settings/tools/closedCaptions'
      preLoaderRoute: typeof SettingsToolsClosedCaptionsIndexImport
      parentRoute: typeof SettingsRouteImport
    }
    '/settings/tools/overlay/': {
      id: '/settings/tools/overlay/'
      path: '/tools/overlay'
      fullPath: '/settings/tools/overlay'
      preLoaderRoute: typeof SettingsToolsOverlayIndexImport
      parentRoute: typeof SettingsRouteImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  PresenterRouteRoute: PresenterRouteRoute.addChildren({
    PresenterControllerRouteRoute: PresenterControllerRouteRoute.addChildren({
      PresenterControllerIndexRoute,
      PresenterControllerBookmarksIndexRoute,
      PresenterControllerHistoryIndexRoute,
      PresenterControllerNavigatorIndexRoute,
      PresenterControllerSearchIndexRoute,
    }),
  }),
  SettingsRouteRoute: SettingsRouteRoute.addChildren({
    SettingsIndexRoute,
    SettingsClientCategoryRoute,
    SettingsServerCategoryRoute,
    SettingsClientHotkeysIndexRoute,
    SettingsClientSourcesIndexRoute,
    SettingsServerAboutIndexRoute,
    SettingsToolsClosedCaptionsIndexRoute,
    SettingsToolsOverlayIndexRoute,
  }),
  OverlayIndexLazyRoute,
  ScreenReaderIndexLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/presenter",
        "/settings",
        "/overlay/",
        "/screen-reader/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/presenter": {
      "filePath": "presenter/route.tsx",
      "children": [
        "/presenter/controller"
      ]
    },
    "/settings": {
      "filePath": "settings/route.tsx",
      "children": [
        "/settings/",
        "/settings/client/$category",
        "/settings/server/$category",
        "/settings/client/hotkeys/",
        "/settings/client/sources/",
        "/settings/server/about/",
        "/settings/tools/closedCaptions/",
        "/settings/tools/overlay/"
      ]
    },
    "/presenter/controller": {
      "filePath": "presenter/controller/route.tsx",
      "parent": "/presenter",
      "children": [
        "/presenter/controller/",
        "/presenter/controller/bookmarks/",
        "/presenter/controller/history/",
        "/presenter/controller/navigator/",
        "/presenter/controller/search/"
      ]
    },
    "/settings/": {
      "filePath": "settings/index.tsx",
      "parent": "/settings"
    },
    "/overlay/": {
      "filePath": "overlay/index.lazy.tsx"
    },
    "/screen-reader/": {
      "filePath": "screen-reader/index.lazy.tsx"
    },
    "/settings/client/$category": {
      "filePath": "settings/client/$category.tsx",
      "parent": "/settings"
    },
    "/settings/server/$category": {
      "filePath": "settings/server/$category.tsx",
      "parent": "/settings"
    },
    "/presenter/controller/": {
      "filePath": "presenter/controller/index.tsx",
      "parent": "/presenter/controller"
    },
    "/presenter/controller/bookmarks/": {
      "filePath": "presenter/controller/bookmarks/index.tsx",
      "parent": "/presenter/controller"
    },
    "/presenter/controller/history/": {
      "filePath": "presenter/controller/history/index.tsx",
      "parent": "/presenter/controller"
    },
    "/presenter/controller/navigator/": {
      "filePath": "presenter/controller/navigator/index.tsx",
      "parent": "/presenter/controller"
    },
    "/presenter/controller/search/": {
      "filePath": "presenter/controller/search/index.tsx",
      "parent": "/presenter/controller"
    },
    "/settings/client/hotkeys/": {
      "filePath": "settings/client/hotkeys/index.tsx",
      "parent": "/settings"
    },
    "/settings/client/sources/": {
      "filePath": "settings/client/sources/index.tsx",
      "parent": "/settings"
    },
    "/settings/server/about/": {
      "filePath": "settings/server/about/index.tsx",
      "parent": "/settings"
    },
    "/settings/tools/closedCaptions/": {
      "filePath": "settings/tools/closedCaptions/index.tsx",
      "parent": "/settings"
    },
    "/settings/tools/overlay/": {
      "filePath": "settings/tools/overlay/index.tsx",
      "parent": "/settings"
    }
  }
}
ROUTE_MANIFEST_END */
